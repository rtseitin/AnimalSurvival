package me.roberttseitin.animals;

/*
 * The class for the Kangaroo animal, extends the Animal class and edits countless methods to customize the experience and
 * feel of playing as a Kangaroo.
 */

import me.roberttseitin.Animal;

import java.util.Random;

public class Kangaroo extends Animal {
    /*
     * Constructor for the animal, defines its maximum stats and sets starting stats
     */
    public Kangaroo() {
        super("Kangaroo", 30, 30, 25);
        super.setCurrentHunger(25);
        super.setCurrentThirst(28);
        super.setCurrentWarmth(23);
    }

    /*
     * The method is what gets executed when the user initiates the find food task, it regenerates the user's hunger by
     * a varying amount in several circumstances depending on several factors
     */
    protected void findFood() {
        Random rand = new Random();
        boolean obtainsFood;
        if (getLastAction().equalsIgnoreCase("SKIP")) {
            obtainsFood = rand.nextInt(2) == 0;
        } else {
            obtainsFood = rand.nextInt(3) == 0;
        }

        if (obtainsFood) {
            int replenishBy = super.getMaxHunger() - super.getCurrentHunger();
            setCurrentHunger(getCurrentHunger() + replenishBy);
            System.out.printf("Your hunger has replenished by %s points\n", replenishBy);
        } else {
            System.out.println("Unfortunately, you did not find any foodâ€¦");
            System.out.println("Another day going hungry");
        }
    }

    /*
     * The method is what gets executed when the user initiates the find water task, it regenerates the user's thirst by
     * a varying amount in several circumstances depending on several factors
     */
    protected void findWater() {
        super.setCurrentThirst(getCurrentThirst() + 10);
        System.out.println("Your thirst has been replenished by 10 points");

        if (getLastAction().equalsIgnoreCase("SKIP")) {
            super.setCurrentHunger(getCurrentHunger() - 3);
            System.out.println("However you were exhausted by the end and 3 hunger points.");
        }
    }

    /*
     * The method is what gets executed when the user initiates the find shelter task, it regenerates the user's warmth by
     * a varying amount in several circumstances depending on several factors
     */
    protected void findWarmth() {
        Random rand = new Random();
        int warmthRegen;
        if (getLastAction().equalsIgnoreCase("SKIP")) {
            warmthRegen = rand.nextInt(6) + 8;
        } else {
            warmthRegen = rand.nextInt(6) + 6;
        }
            System.out.printf("Warmth has been regenerated by %s points!\n", warmthRegen);
        super.setCurrentWarmth(getCurrentWarmth() + warmthRegen);
    }

    /*
     * The method that is responsible for adjusting any stats of the animal on a daily basis, is executed regardless of
     * the chosen daily task. Responsible for the animal losing stats every day. Crucial for the game.
     */
    protected void dailyStatsLoss() {
        Random rand = new Random();
        boolean regenerateAllStats = rand.nextInt(400) == 0;

        if (regenerateAllStats) {
            super.setCurrentHunger(super.getMaxHunger());
            super.setCurrentWarmth(super.getMaxWarmth());
            super.setCurrentThirst(super.getMaxThirst());

            System.out.println("WOW! Today was amazing! You somehow managed to do everything despite aiming for for a specific task");
            System.out.println("All your stats were regenerated fully!");
        } else {
            int deductHunger = 5, deductThirst = 5, deductWarmth = 4;

            if (!getLastAction().equalsIgnoreCase("FOOD")) {
                super.setCurrentHunger(getCurrentHunger() - deductHunger);
                System.out.printf("You lost %s hunger points from your daily activity today\n", deductHunger);
            }

            if (!getLastAction().equalsIgnoreCase("WATER")) {
                super.setCurrentThirst(getCurrentThirst() - deductThirst);
                System.out.printf("You lost %s thirst points from your daily activity today\n", deductThirst);
            }

            if (!getLastAction().equalsIgnoreCase("SHELTER")) {
                super.setCurrentWarmth(getCurrentWarmth() - deductWarmth);
                System.out.printf("You lost %s warmth points from your daily activity today\n", deductWarmth);
            }
        }
    }

}
