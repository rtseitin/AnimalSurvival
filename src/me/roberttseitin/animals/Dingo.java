package me.roberttseitin.animals;

/*
 * The class for the Dingo animal, extends the Animal class and edits countless methods to customize the experience and
 * feel of playing as a Dingo.
 */

import me.roberttseitin.Animal;

import java.util.Random;

public class Dingo extends Animal {
    /*
     * Constructor for the animal, defines its maximum stats and sets starting stats
     */
    public Dingo() {
        super("Dingo", 20, 12, 15);
        super.setCurrentHunger(18);
        super.setCurrentThirst(11);
        super.setCurrentWarmth(13);
    }

    /*
     * The method is what gets executed when the user initiates the find food task, it regenerates the user's hunger by
     * a varying amount in several circumstances depending on several factors
     */
    protected void findFood() {
        Random rand = new Random();
        boolean obtainsFood = rand.nextBoolean();

        if (obtainsFood) {
            int replenishBy = super.getMaxHunger() - super.getCurrentHunger();
            setCurrentHunger(getCurrentHunger() + replenishBy);
            System.out.printf("Your hunger has replenished by %s points\n", replenishBy);
        } else {
            System.out.println("Unfortunately, you did not find any foodâ€¦");
            System.out.println("Another day going hungry");
        }
    }

    /*
     * The method is what gets executed when the user initiates the find water task, it regenerates the user's thirst by
     * a varying amount in several circumstances depending on several factors
     */
    protected void findWater() {
        super.setCurrentThirst(getCurrentThirst() + 8);
        System.out.println("Your thirst has been replenished by 8 points");
        super.setCurrentHunger(getCurrentHunger() - 3);
        System.out.println("However you were exhausted by the end and 3 hunger points.");
    }

    /*
     * The method is what gets executed when the user initiates the find shelter task, it regenerates the user's warmth by
     * a varying amount in several circumstances depending on several factors
     */
    protected void findWarmth() {
        Random rand = new Random();
        int warmthRegen = rand.nextInt(4) + 3;
        System.out.printf("Warmth has been regenerated by %s points!\n", warmthRegen);
        super.setCurrentWarmth(getCurrentWarmth() + warmthRegen);
    }

    /*
     * The method that is responsible for adjusting any stats of the animal on a daily basis, is executed regardless of
     * the chosen daily task. Responsible for the animal losing stats every day. Crucial for the game.
     */
    protected void dailyStatsLoss() {
        Random rand = new Random();
        int loseStatChoice = rand.nextInt(2) + 1;
        boolean regenerateAllStats = rand.nextInt(400) == 0;

        if (regenerateAllStats) {
            super.setCurrentHunger(super.getMaxHunger());
            super.setCurrentWarmth(super.getMaxWarmth());
            super.setCurrentThirst(super.getMaxThirst());

            System.out.println("WOW! Today was amazing! You somehow managed to do everything despite aiming for for a specific task");
            System.out.println("All your stats were regenerated fully!");
        } else {
            if (loseStatChoice == 1) {
                super.setCurrentThirst(getCurrentThirst() - 3);
                System.out.println("During your task today you worked very hard and got more thirsty than usual. As a result you lost 3 thirst points");

                super.setCurrentWarmth(getCurrentWarmth() - 1);
                System.out.println("During your task today it got mildly cold outside and as a result you lost 1 warmth point");
            } else {
                super.setCurrentWarmth(getCurrentWarmth() - 2);
                System.out.println("During your task today it got very cold outside and as a result you lost 2 warmth points");

                super.setCurrentHunger(getCurrentHunger() - 2);
                System.out.println("You saw a rabbit whilst completing your daily task making you very hungry, you lost 2 hunger points.");
            }
        }
    }
}
